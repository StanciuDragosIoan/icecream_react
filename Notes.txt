
################################Day 1

###create collection and cluster

-created a collection : icecream
-created a cluster: icevendor
-added user to the cluster (user: icecream123 password: icecream123)
-whitelisted ip address (current IP only: 188.27.170.104) + also allowed access from anywhere (in case they will want to connect and check my DB)

###installed dependencies and set up express server for the backend
-created .gitignore file and added node_modules to it;
-initialized empty git repo;
-initialized a package.json (npm init);
-installed regular dependencies (express and mongoose + config + express-validator);
-installed dev dependencies (npm i -D nodemon concurrently)
*
nodemon (watch server so we don t refresh when we make a change)
config (allows us to define global variables and use them throughout app ->used with mongodb here);
concurrently (run front end and bk end at same time on 2 ports)
express-validator (for input validation)

-created the server.js file (which had been set up as entry point for the package.json file -for the backend)
-created custom npm scripts in package.json (the 'start' and the 'server' script in scripts {});
-run #npm run server;
-opened postman and made a GET request to http://localhost:5000 and we get the good response;
-in 'config' created a file called 
-created a 'db.js' file inside the 'config' directory (we'll do the mongoDB connection here);

###connected to DB
-copied the connection string from mongodb account;
-created a folder called 'config' in the root directory of the app;
-created a 'default.json' file inside the config directory;
-set up the mongoURI in the default.JSON
-created a db.js file in which we connected to the mongoDB using mongoose and the mongoURI
-opened server.js (imported connectDB) and called it
-ran #npm run server to start the mongoDB server;



###create the API Routes
-will have a single route 'icecream.js' -->will display only quantity and price (could handle adding new icecream items to the 
store);
-in the 'API' folder created icecream.js (will handle fetching all the icecream items from the database);
-in the icecream.js import express;
-defined the route in the file
-in server.js we defined the routes;
-tested the API ice cream route with a get request at : http://localhost:5000/api/icecream (and it works);



###create the icecream model
-created a new folder 'models' in the root;
-created an Icecream.js file in it (capital I);
-set up the icecream schema with the following:

*flavour (string)
*price (number)
*description (string)
*quantity (string)
*date (date)


*bonus add picture if time allows (if not, note it down as future improvement);
-created a folder called 'routes' in the root and another folder called 'api' inside of it; 
-made POST request to the API url (http://localhost:5000/api/icecream) with a content-type header of app/json and a raw JSON body (choose raw in postman);
-implemented validation with express-validator


###made the request and the payload body validation (POST request to DB to add new icecream item)
-created a POST request in the icecream.js file (in the API routes)
-tested validation with postman (made post request with full/correcty data body and with missing params)


 
####implemented the 'add new icecream' logic (see icecream.js file in 'api' lines 42-61
-checked for errors, if no errors, search for icecream item by flavour (if it exists, return error);
-if icecream item does not exist, put it in a new instance object and save it to DB
-tested it with POST request at (http://localhost:5000/api/icecream) in postman and this time it saved the icecream in the DB (Success!!!)
*also tried to add a 2nd item again and it did not allow us (criterion for item to be unique is the flavour)


NOTE! if you need to modify the get route so we can fetch a single icecream item from DB (check video 10)!!!!!!!!!!!!!!



###set up react front end and concurrently so we can run server + clt at same time;

-created a new react app in 'client' in the root directory;
-CD client and started dev server (npm start);
-created new scripts in 'scripts' object in the package.json in the root directory:

   "client": "npm start --prefix client" (line 9 - --prefix client makes it so that the script 'client' runs in the client directory
   "dev": "concurrently \"npm run server\" \"npm run client\"" (runs the server and the client concurrently
-cd into root directory and run #npm run dev (starts both client and server);

#npm run dev (Starts both) -this script is defined in the package.json in the root directory;




keep from video 31 (from dependency installation redux/redux thunk/ etc... see if redux is indeed required for this simpel type of project)

 




##############################################Day 2

###set up react and concurrently
-installed into client axios, react-router-dom, redux react-redux redux-thunk (middleware for async requests) redux-devtools-extension (extra package) moment (date/time
library) react-moment;	
-set up a proxy in the package.json in the client (so that we can make http requests directly to the api routes without having to specify localhost..)



### performed cleanup and defined initial components

-removed logo svg, service worker, index css and app.test
-made the app function into an arrow function and made it return a react fragment (a ghost element that does not show up in the DOM)
-in the 'src' directory in the client created a "components" directory
-in "components" created another folder called 'layout'
-created Navbar.js in layout;
-created Landing.js (for the landing page)
-created Buyicecream.js

### implemented react router
-created Addicecream.js (to add new iceream varieties);
-created Buyicecream.js (to buy icecream);


-started working on the form in the Addicecream.js
-created form state (each input needs to have its own state and they also need to have an onchange handler so state gets updated when we type in the field



########################keep from add icecream event (video 34)  simplify!

##############################################Day 3
-captured form state on submit event;
-made post request in the database with form data using axios -without redux (video 35 MERN crs)
-worked a bit more on the buyicecream component 
###prepared to implement redux

NOTES ###
the gist of redux -> in an app we can have 'component lvl state' (just like with the register icecream form, the data submitted there gets put in the component level state)
there are also app level state (like for example authentication, profiles, posts) items that we want to be accessible from anywhere in the app (in our case the icecreams from
the database are like that). Redux gives us app level state and it works like a 'cloud' that hovers over the app and we can make actions to it through events, and Redux 
will share state (will make data fall down into any component). The data we get from the server (the total icecreams in our case) will be put in a 'store'. We fire off
an action that fetches the data from the database and puts it in a store. From any component we can call an action that will do something (say we want to buy an icecream and
update its quantity ---->so we make a request to the server, update the quantity on the server, we get a response and we want to update the UI). This will happen through
a reducer that takes in an action. We can dispatch an action to the reducer and the reducer decides how to handle the state and how to pass it down to the components
in the UI. It will update any components that use that piece of state. This prevents us from having to pass things around from component to component (as we'd have to
without a state manager).

So we basically call an action, dispatch it to a reducer (we might have multiple reducers) and the reducer decides what to do with the state (delete an icecream, update quantity, etc..)
and then it will send that state down to any components that need it; It will send the state to any parent or child components (say we have the icecream store and the child nested
icecream items components). ALl of this comes from the icecream store state (the ice cream types/quantities, etc...) so we want to get that state to 'rain down' from the 
reducer

say we have an icecream reducer that will handle everything to do with the icecream state. So, on every single load of the app component we want to hit the back end and
check for the icecream items api/icecream endpoint and grab the icecream items in there and then components will react to that (the icecream store will update its state
and its UI e.g. will display the correct icecream quantities)

we may have an alert reducer as well;	



###started implementing redux (thanks to having installed the redux extensions --> redux/ react-redux /redux-thunk /redux-devtools-extension,
tge boiler plate setup will be a bit neater;
 
-in the 'src' directory of 'client' created store.js;
-added in it some imports : 

// store and middleware use
import { createStore, applyMiddleware } from "redux";
//redux dev tools ext
import { composeWithDevtools} from "redux-devtools-extension";
//thunk middleware
import thunk from "redux-thunk";
// root reducer to combine multiple reducers (which will be combined into a single one)
import rootReducer from "./reducers";

*before the last import I created a folder called 'reducers' in the 'src' directory of 'client' and an index.js file inside of it;

-set initial state in the store.js
-bring in middleware
-create the store  (called createStore() check store.js);
-exported store;
-surrounded the app with the Provider tag so that all the components can use the app level state;

-in App.js imported a Provider (from the 'react-redux' package -->this package combines redux and react) and the store.js;


in the index.js in the 'reducers' (src of client) I imported combineReducers from 'redux'; (so we can combine multiple reducers into one)
-this is how Redux is implemented;


###created an alert reducers (with action and an action type) -->video 38

-created an alert.js inside the reducers folder in the client;
-imported that file into the root reducer (index.js in 'reducers');
-created a folder called 'actions' in the 'src' in the 'client' (this will hold the action files - here we make http requests for instance);
-created a types.js file in the 'actions' directory (this will hold all our constant variables);
-in the 'actions' directory created an alert.js file;

-installed the UUID package (which will generate a random unique id --> #npm i uuid);
-imported uuid in alert.js;


###created the alert component and set the action call (video 39)

-called the alert cation in the Addicecream.js component (instead of logging the alert messages we will display them in the UI);
#first we need to connect the Addicecream.js component to redux (through connect from 'react-redux' package which we import in Addicecream.js);
-imported connect from 'react-redux';
-imported setAlert from actions;
-created the Alert.js component into components/layout;
-called the setAlert and set up the whole alert system (see in depth explanations in the video)

###created the register icecream_reducer and the icecream action in the action files; (video 40)

-created an icecream_reducer.js file in the reducers file (we'll make http requests here with axios);
-added 2 more types to the types.js action file (register success and register fail);
-created an icecream_actions file in the actions file (icecream_actions.js);
-connected the actions to the component (Addicecream.js);



##############################################Day 4 (Load icecreams) - video 41

-created  'ICECREAM_LOADED'  and 'ICECREAM_ERROR' action types in the types file;
-created a loadIcecreamItems function in the icecream_actions.js (made get request to the API) 
-set the function call in the icecream_reducer.js
-called the function loadIcecreamItems function in the App.js
-load icecream request fetches all icecream items from DB;

-sometimes the server gives a 500 error (not clear why)
-started working on the buy component logic (need to add state);



########################keep from add icecream event (video 41)


##############################################Day 5 (deployed app as it is -unfinished ) to Heroku;

-log in to heroku;
-will deploy using the heroku CLI;

-click create new app;


-need to make the icecream vending machine in the Buyicecream.js component, make a call to the back end, loop through all icecream items in there and display them
in a grid inside of itself (will do that through an action from icecream_action file --check that-- which will be called through a reducer 

#see how he does it in the MERN course + in other projects for the structure and setup;



Further improvements: 

-add gravatar for pictures (see if can create collection with icecream pics and add them to the machine on the frontend);